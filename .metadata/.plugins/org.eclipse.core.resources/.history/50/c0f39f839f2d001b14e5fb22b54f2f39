package com.cts.stock;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

import java.sql.Date;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;

import com.cts.stock.dao.StockDao;
import com.cts.stock.model.Stock;
import com.cts.stock.services.StockService;

@SpringBootTest
public class stockServiceTest {

	@Mock
	StockService stockServiceMock;

	@InjectMocks
	StockDao stockDaoMock = new StockDao() {
		
		@Override
		public <S extends Stock> Optional<S> findOne(Example<S> example) {
			// TODO Auto-generated method stub
			return null;
		}
		
		@Override
		public <S extends Stock> Page<S> findAll(Example<S> example, Pageable pageable) {
			// TODO Auto-generated method stub
			return null;
		}
		
		@Override
		public <S extends Stock> boolean exists(Example<S> example) {
			// TODO Auto-generated method stub
			return false;
		}
		
		@Override
		public <S extends Stock> long count(Example<S> example) {
			// TODO Auto-generated method stub
			return 0;
		}
		
		@Override
		public <S extends Stock> S save(S entity) {
			// TODO Auto-generated method stub
			return null;
		}
		
		@Override
		public Optional<Stock> findById(Long id) {
			// TODO Auto-generated method stub
			return null;
		}
		
		@Override
		public boolean existsById(Long id) {
			// TODO Auto-generated method stub
			return false;
		}
		
		@Override
		public void deleteById(Long id) {
			// TODO Auto-generated method stub
			
		}
		
		@Override
		public void deleteAll(Iterable<? extends Stock> entities) {
			// TODO Auto-generated method stub
			
		}
		
		@Override
		public void deleteAll() {
			// TODO Auto-generated method stub
			
		}
		
		@Override
		public void delete(Stock entity) {
			// TODO Auto-generated method stub
			
		}
		
		@Override
		public long count() {
			// TODO Auto-generated method stub
			return 0;
		}
		
		@Override
		public Page<Stock> findAll(Pageable pageable) {
			// TODO Auto-generated method stub
			return null;
		}
		
		@Override
		public <S extends Stock> S saveAndFlush(S entity) {
			// TODO Auto-generated method stub
			return null;
		}
		
		@Override
		public <S extends Stock> List<S> saveAll(Iterable<S> entities) {
			// TODO Auto-generated method stub
			return null;
		}
		
		@Override
		public Stock getOne(Long id) {
			// TODO Auto-generated method stub
			return null;
		}
		
		@Override
		public void flush() {
			// TODO Auto-generated method stub
			
		}
		
		@Override
		public List<Stock> findAllById(Iterable<Long> ids) {
			// TODO Auto-generated method stub
			return null;
		}
		
		@Override
		public <S extends Stock> List<S> findAll(Example<S> example, Sort sort) {
			// TODO Auto-generated method stub
			return null;
		}
		
		@Override
		public <S extends Stock> List<S> findAll(Example<S> example) {
			// TODO Auto-generated method stub
			return null;
		}
		
		@Override
		public List<Stock> findAll(Sort sort) {
			// TODO Auto-generated method stub
			return null;
		}
		
		@Override
		public List<Stock> findAll() {
			// TODO Auto-generated method stub
			return null;
		}
		
		@Override
		public void deleteInBatch(Iterable<Stock> entities) {
			// TODO Auto-generated method stub
			
		}
		
		@Override
		public void deleteAllInBatch() {
			// TODO Auto-generated method stub
			
		}
	};

	@SuppressWarnings("deprecation")
	@Test
	public void testGetAllStockDetails() {
		List<Stock> demoList = new ArrayList<Stock>();
		demoList.add(new Stock(11, "PCM", 45, new Date(2017, 05, 05), new Date(2019, 05, 05), "cipla"));
		when(stockDaoMock.findAll()).thenReturn(demoList);
		List<Stock> result =  stockServiceMock.getAllStockDetails();
		assertEquals(demoList, result);
	}
	
	@SuppressWarnings("deprecation")
	@Test
	public void testGetStockDetailsById() {
		Optional<Stock> stock = Optional.of(new Stock(11, "PCM", 45, new Date(2017, 05, 05), new Date(2019, 05, 05), "cipla"));
		long id =11;
		when(stockDaoMock.findById(id)).thenReturn(stock);
		Optional<Stock> result = stockServiceMock.getStockDetailsById(11);
		assertEquals(stock, result);
	}

}
