package com.cts.invoice.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.cts.invoice.exceptions.PatientNotPresentException;
import com.cts.invoice.exceptions.StockNotPresentException;
import com.cts.invoice.model.InvoiceEntry;
import com.cts.invoice.services.InvoiceService;
import com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;
import com.netflix.hystrix.contrib.javanica.annotation.HystrixProperty;

import lombok.extern.slf4j.Slf4j;

@RestController
@Slf4j
@RequestMapping(value = "/")
public class InvoiceController {

	@Autowired
	private InvoiceService invoiceService;

	// returns every detail available
	@GetMapping
	@HystrixCommand(fallbackMethod = "fallback_message", commandProperties = {
			@HystrixProperty(name = "execution.isolation.thread.timeoutInMilliseconds", value = "1000") })
	public ResponseEntity<?> getAllDetails()
			throws PatientNotPresentException, StockNotPresentException, InterruptedException {
		log.debug("START");
		Thread.sleep(3000);

		List<InvoiceEntry> results = invoiceService.getAllDetails();
		if (results.isEmpty())
			return new ResponseEntity<String>("Database is Empty", HttpStatus.NO_CONTENT);

		return new ResponseEntity<List<InvoiceEntry>>(results, HttpStatus.OK);
	}
	
	private ResponseEntity<?> fallback_message(){
		return new ResponseEntity<>(HttpStatus.REQUEST_TIMEOUT);
	}
}
